# https://gist.githubusercontent.com/Nobody1902/8bf9dab8a79a0426d4fd2e03c2f9ea50/raw/380f19f0c9cd474b29177db641704142a359e8e6/alacritty.toml

# $HOME/.config/alacritty/alacritty.toml
# by Rito Ghosh 2023-10-06

# Alacritty now uses TOML formatting for its config files.
# This is a simple example.

# There are the specification here: https://github.com/alacritty/alacritty/blob/master/extra/man/alacritty.5.scd
# It is not obvious how it translates to TOML. But it is extremely straightforward.

# example: WINDOW, COLORS, etc. are tables, and should be represented as [window], [colors], respectively.
# specifics of variables go under them. e.g.- look under "dynamic_padding" under-
# https://github.com/alacritty/alacritty/blob/master/extra/man/alacritty.5.scd#window
# write `dynamic_padding = true` (without backticks -`) under the table [window]
# for variables with multiple values, use "dotted keys". Like setting `padding.x = 5` under [window].
# This is simple. If not clear, do several trials and errors.

# Below is my initial set-up. The TOML homepage (https://toml.io/en/v1.0.0) was very helpful in figuring this out. 
# I put the file alacritty.toml in $HOME/.config/alacritty. However it can be kept anywhere among the places mentioned in
# https://github.com/alacritty/alacritty/tree/master#configuration

#import = [
#"~/.config/alacritty/base16-dark.toml",
#"~/.config/alacritty/keybindings.toml",
#]

[window]
opacity = 1

padding = { x = 30, y = 40 }
dynamic_padding = true

decorations = "None"
decorations_theme_variant = "Dark" # "Light" or "None"

startup_mode = "Maximized" # "Fullscreen" or "Windowed"

dynamic_title = false
title = "Alacritty"

[scrolling]
history = 10000
multiplier = 5

[font]
size = 16.0
normal = { family = "FiraCode Nerd Font", style = "Regular" }

[mouse]
hide_when_typing = true

[cursor]
style = {shape = "Block", blinking = "On"}
blink_interval = 600
unfocused_hollow = true

# Tip: for inspiration, look for values in the source code files of your favorite VS Code themes, and use the color picker in
# Google to test colors before setting a value, or simply using an editor such as VS Code where colors are displayed in a 
# small box when a HEX is detected by the editor.

# Colors Ef-Winter
[colors.primary]
background = "#1e1e2e"
foreground = "#cdd6f4"
dim_foreground = "#7f849c"
bright_foreground = "#cdd6f4"

[colors.cursor]
text = "#1e1e2e"
cursor = "#f5e0dc"

[colors.vi_mode_cursor]
text = "#1e1e2e"
cursor = "#b4befe"

[colors.search.matches]
foreground = "#1e1e2e"
background = "#a6adc8"

[colors.search.focused_match]
foreground = "#1e1e2e"
background = "#a6e3a1"

[colors.footer_bar]
foreground = "#1e1e2e"
background = "#a6adc8"

[colors.hints.start]
foreground = "#1e1e2e"
background = "#f9e2af"

[colors.hints.end]
foreground = "#1e1e2e"
background = "#a6adc8"

[colors.selection]
text = "#1e1e2e"
background = "#f5e0dc"

[colors.normal]
black = "#45475a"
red = "#f38ba8"
green = "#a6e3a1"
yellow = "#f9e2af"
blue = "#89b4fa"
magenta = "#f5c2e7"
cyan = "#94e2d5"
white = "#bac2de"

[colors.bright]
black = "#585b70"
red = "#f38ba8"
green = "#a6e3a1"
yellow = "#f9e2af"
blue = "#89b4fa"
magenta = "#f5c2e7"
cyan = "#94e2d5"
white = "#a6adc8"

[colors.dim]
black = "#45475a"
red = "#f38ba8"
green = "#a6e3a1"
yellow = "#f9e2af"
blue = "#89b4fa"
magenta = "#f5c2e7"
cyan = "#94e2d5"
white = "#bac2de"

[[colors.indexed_colors]]
index = 16
color = "#fab387"

[[colors.indexed_colors]]
index = 17
color = "#f5e0dc"

[colors]
draw_bold_text_with_bright_colors = true
transparent_background_colors = true

[keyboard]
bindings = [
    { key="N", mods="Control", action="SpawnNewInstance" },
    { key="V", mods="Alt", action="ToggleViMode" },
    { key="C", mods="Alt", action="ClearSelection" },
    { key="F", mods="Control", action="SearchForward" },
    { key="F", mods="Control | Shift", action="SearchBackward" },
    # Vi Mode Selection
    { key="S", mods="Alt", mode="Vi", action="ToggleNormalSelection" },

    { key="ArrowLeft", mods="Alt", mode="Vi", action="SemanticLeft" },
    { key="ArrowRight", mods="Alt", mode="Vi", action="SemanticRight" },
]
